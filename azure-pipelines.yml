
variables:
  vmImage: 'ubuntu-latest'
  javaHome: 'JDKVersion'
  mavenOptions: '-Xmx3072m'
  jdkVersion: '1.7'
  pomFilePath: 'pom.xml'
  webFolder: klient-web/src/main
  dockerVersion: '17.09.0-ce'
  archiveName: 'nhareg-$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildId)'

stages:
### BUILD ###
- stage: Build
  pool:
      vmImage: $(vmImage)
  jobs:
# COMPILE WEB COMPONENTS
  - job: compile_web
    displayName: compile web components
    steps:
    - task: Npm@1
      name: npm_install
      displayName: NPM Install
      inputs:
        workingDir: $(webFolder)
        command: install
    - task: CmdLine@2
      name: bower_install
      displayName: Bower Install
      inputs:
        script: 'bower install'
        workingDirectory: $(webFolder)
    - task: Grunt@0
      name: grunt_compile
      displayName: Grunt build and compile
      inputs:
        gruntFile: $(webFolder)/Gruntfile.js
        targets: build compile
        gruntCli: 'node_modules/grunt-cli/bin/grunt'
    - task: PublishPipelineArtifact@1
      name: publish_web_artifact
      displayName: Publish Web Pipeline Artifact
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/$(webFolder)'
        artifact: 'webCompileArtifact'
        publishLocation: 'pipeline'
# TEST
  - job: verify
    displayName: maven verify
    condition: and(succeeded(), ne(variables['SKIP_TESTS'], 'true'))
    dependsOn: compile_web
    steps:
    - task: DownloadPipelineArtifact@2
      name: download_web_artifact
      displayName: Download Web Pipeline Artifact
      inputs:
        buildType: 'current'
        artifactName: 'webCompileArtifact'
        targetPath: '$(System.DefaultWorkingDirectory)/$(webFolder)'
    - task: Maven@3
      name: maven_verify
      displayName: Maven verify
      inputs:
        mavenPomFile: $(pomFilePath)
        mavenOptions: $(mavenOptions)
        javaHomeOption: $(javaHome)
        jdkVersionOption: $(jdkVersion)
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        goals: verify
### STAGING ###
- stage: Staging
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'dev'), eq(variables['Build.SourceBranchName'], 'master')))
  jobs:
  - job: package_and_stage
    displayName: Package and Stage
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DockerInstaller@0
      name: docker_install
      displayName: Install Docker CLI
      inputs:
        dockerVersion: $(dockerVersion)
    - task: Docker@2
      name: docker_build
      displayName: Build Docker file
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        arguments: $(DOCKER_ARGS)
        tags: |
          nhareg:$(Build.BuildId)
          nhareg:latest
    - task: CmdLine@2
      name: docker_save
      displayName: Save Docker image
      inputs:
        script: 'docker save nhareg -o nhareg.tar'
        workingDirectory: '$(Agent.BuildDirectory)'
    # COPY FILES TO STAGING DIRECTORY 
    - task: CopyFiles@2
      name: copy_image
      displayName: Copying tar image
      inputs:
        Contents: nhareg.tar
        SourceFolder: $(Agent.BuildDirectory)
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      name: copy_docker_compose
      displayName: Copying docker-compose
      inputs:
        Contents: 'docker-compose.yml'
        SourceFolder: $(System.DefaultWorkingDirectory)
        TargetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
    - task: CopyFiles@2
      name: copy_readme
      displayName: Copying Readme
      inputs:
        Contents: 'readme.md'
        SourceFolder: $(System.DefaultWorkingDirectory)
        TargetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
    - task: CopyFiles@2
      name: copy_sql
      displayName: Copying SQL files
      inputs:
        Contents: '**/nha-db/*.sql'
        SourceFolder: $(Agent.BuildDirectory)
        TargetFolder: '$(Build.ArtifactStagingDirectory)/SQL/'
        flattenFolders: true
    - task: CmdLine@2
      name: fetch_docker_installer
      displayName: Fetching Docker Installer
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        script: 'curl -L -O https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe'
    - task: CmdLine@2
      name: fetch_docker_toolbox
      displayName: Fetching Docker Toolbox
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        script: 'curl -L -O https://github.com/docker/toolbox/releases/download/v19.03.1/DockerToolbox-19.03.1.exe'
    - task: CmdLine@2
      name: fetch_mysql_server
      displayName: Fetching MySQL Server
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        script: 'curl -L -O https://dev.mysql.com/get/Downloads/MySQLInstaller/mysql-installer-community-5.7.28.0.msi'
    # Update archive name if master
    - task: Bash@3
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
          echo "##vso[task.setvariable variable=artifactName]nhareg-$(MajorVersion).$(MinorVersion).$(PatchVersion)"
    # ZIP files for artifact
    - task: ArchiveFiles@2
      name: zip_files
      displayName: ZIP files
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(archiveName).zip'
        replaceExistingArchive: true
    # Publish Artifact
    - task: PublishBuildArtifacts@1
      name: publish_artifact
      displayName: Publishing artifact
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/$(archiveName).zip
        ArtifactName: 'nhareg_artifact'
### GIT MIRRORING ###
- stage: Git mirroring
  dependsOn: Staging
  condition: succeeded()
  # condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'dev'), eq(variables['Build.SourceBranchName'], 'master')))
  jobs:
  - job: git_mirroring
    displayName: Git mirroring
    variables:
    - group: git-mirror-tokens
    steps:
    # CLONE SOURCE GIT REPOSITORY AND PUSH TO DESTINATION GIT REPOSITORY
    - task: swellaby.mirror-git-repository.mirror-git-repository-vsts-task.mirror-git-repository-vsts-task@1
      displayName: Mirror Git Repository
      inputs:
        sourceGitRepositoryUri: 'https://amc-no@dev.azure.com/amc-no/Norsk%20Helsearkiv/_git/NHAREG'
        sourceGitRepositoryPersonalAccessToken: $sourceGitRepositoryToken
        destinationGitRepositoryUri: 'https://github.com/norsk-helsearkiv/nhareg.git'
        destinationGitRepositoryPersonalAccessToken: $destGitRepositoryToken

